#!/bin/bash
#
# wallup
#   Update wallpaper images on a timed basis.

# This directory contains images to use as desktop wallpaper.
DEFAULT_WPHOME="$HOME/Pictures/Wallpaper"

# Any files with the following file extensions will be used.
WPEXTS=(jpg png gif jpeg JPG)

# This is the interval between wallpaper image updates, in seconds.
WPTIME=$((10 * 60))

# The first wallpaper image is displayed after this many seconds.
# NOTE: Subsequent images are updated every WPTIME seconds.
WPWAIT=0

# Verify the parameter is an integer, else use the default (above).
if [ "$1" -eq "$1" ] 2> /dev/null; then
    WPWAIT=$1
fi

# This is the name of the subdirectory to place the images
# that have been previously selected at random for wallpaper.
WPSAVE=.wpsave

# This variable enables two images to be used side-by-side for
# a dual monitor configuration.
WPDUAL=false
#WPDUAL=true

# These variables are the pixel dimensions of the dual monitors.
WPMONX=1920
WPMONY=1080

# This integer is incremented each time "convert" joins two images.
WPCVTS=0

# Prior to running this script, set the WPHOME environment
# variable to set a non-default wallpaper folder.
if [[ -z "$WPHOME" ]]; then
    if [[ -d "$DEFAULT_WPHOME" ]];  then WPHOME=$DEFAULT_WPHOME
    elif [[ -d "$HOME/Pictures" ]]; then WPHOME=$HOME/Pictures
    else                                 WPHOME=$HOME
    fi
fi

WPDEST="$WPHOME"/"$WPSAVE"
if [[ ! -d "$WPDEST" ]]; then
    mkdir "$WPDEST"
    if [[ $? != 0 ]]; then
        echo "Unable to create $WPDEST. Exiting..."
        exit
    fi
fi

function getdate {
    printf -v WPDATE '%-5d %s %s' $$ $(date +"%D %I:%M%p")
}
getdate

WPHIST="$WPDEST"/wallup.log
WPLOCK="$WPDEST"/.mult-lock
WPLPID="$WPLOCK"/lock-$$

echo "$WPDATE  Starting wallpaper updater for user $USER." >> "$WPHIST"

# Check if we can merge two images for the background.
if $WPDUAL; then
    hash convert >& /dev/null
    if [[ $? -ne 0 ]]; then
        WPDUAL=false
        echo "$WPDATE  Install \"imagemagick\" for dual displays." >> "$WPHIST"
	echo "$WPDATE  ->  (sudo apt install imagemagick)" >> "$WPHIST"
    fi
fi

# If an old lock file exists, clear it out now.
if [[ -d "$WPLOCK" ]]; then
    for oldfile in "$WPLOCK"/*; do
        if [[ -f "$oldfile" ]]; then
            echo "$WPDATE  Removing old lock \"$oldfile\"." >> "$WPHIST"
            rm "$oldfile"
        fi
    done
else
    mkdir "$WPLOCK"
fi

# Create a new lock file for this process ID
touch "$WPLPID"

function getnext {

    # Randomly select the next wallpaper image(s).
    cd "$WPHOME"
    WPNEXT=$(ls ${WPEXTS[@]/#/"*."} 2> /dev/null | shuf -n 1)

    # If no image was found, reload images from the saved folder.
    if [[ "$WPNEXT" == "" ]]; then
        cd "$WPDEST"
        WPFCNT=$(ls -1 ${WPEXTS[@]/#/"*."} 2> /dev/null | wc -l)
        echo "$WPDATE  Moving $WPFCNT image files from $WPSAVE back up to $WPHOME." >> "$WPHIST"
        mv ${WPEXTS[@]/#/"*."} "$WPHOME" 2> /dev/null

        # Now get a random wallpaper image.
        cd "$WPHOME"
	rm cvt-*.png
	WPCVTS=0
	WPNEXT=$(ls ${WPEXTS[@]/#/"*."} 2> /dev/null | shuf -n 1)

        # Quit now if there are no images in the wallpaper folder.
        if [[ "$WPNEXT" == "" ]]; then
            echo "$WPDATE  No Wallpaper images found in $WPHOME. Exiting..." >> "$WPHIST"
            rm -f "$WPLPID"
            exit
        fi
    fi

    # If the destination directory has disappeared, exit now.
    if [[ ! -d "$WPDEST" ]]; then
        echo "No directory $WPDEST. Exiting..."
        exit
    fi
}

# Responsiveness to logout or multiple instances is determined
# by the WPRESP variable, the time to respond in seconds.
WPRESP=10

while true; do

    while [[ $WPWAIT -gt 0 ]]; do
        if [[ ! -f "$WPLPID" ]]; then
            getdate
            echo "$WPDATE  Missing \"$WPLPID\". Exiting..." >> "$WPHIST"
            exit
        fi

        sleep $WPRESP
        WPWAIT=$((WPWAIT - WPRESP))

        if [[ $(ps -C gnome-shell -o euser= | grep $USER) == "" ]]; then
            getdate
            echo "$WPDATE  User $USER not logged in. Exiting..." >> "$WPHIST"
            rm -f "$WPLPID"
            exit
        fi
    done
    WPWAIT=$WPTIME

    getdate

    ((WPCVTS+=1))
    WPFILE="$WPDEST"/cvt-$WPCVTS.png

    getnext
    if $WPDUAL; then
        WPNEXT1=$WPNEXT
        mv "$WPHOME"/"$WPNEXT1" "$WPHOME"/"$WPNEXT1".HOLD
        getnext
	WPNEXT2=$WPNEXT
	mv "$WPHOME"/"$WPNEXT1".HOLD "$WPDEST"/"$WPNEXT1"
        mv "$WPHOME"/"$WPNEXT2" "$WPDEST"

        # Create the merged background image.
	cd "$WPDEST"
        CVTFLAGS="-resize x${WPMONY}< -gravity center -crop ${WPMONX}x${WPMONY}+0+0"
        convert "$WPNEXT1" "$WPNEXT2" $CVTFLAGS +append "$WPFILE"
        echo "$WPDATE  New wallpaper file://$WPFILE (from $WPNEXT1 + $WPNEXT2)" >> "$WPHIST"
    else
        mv "$WPHOME"/"$WPNEXT" "$WPDEST"
	WPFILE="$WPDEST"/"$WPNEXT"
        echo "$WPDATE  New wallpaper file://$WPFILE" >> "$WPHIST"
    fi

    gsettings set org.gnome.desktop.background picture-uri file://"$WPFILE"

done
