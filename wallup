#!/bin/bash
#
# wallup
#   Update wallpaper images on a timed basis.

# This directory contains images to use as desktop wallpaper.
DEFAULT_WPHOME="$HOME/Pictures/Wallpaper"

# Any files with the following file extensions will be used.
WPEXTS=(jpg png gif jpeg JPG)

# This is the interval between wallpaper image updates, in seconds.
WPTIME=$((10 * 60))

# The first wallpaper image is displayed after this many seconds.
# NOTE: Subsequent images are updated every WPTIME seconds.
WPWAIT=30

# Responsiveness to logout or multiple instances is determined
# by the WPRESP variable, the time to respond in seconds.
WPRESP=2

# Set "=true" for dynamic response to display changes.
WPDYNAM=true

# Verify the parameter is an integer, else use the default (above).
if [ "$1" -eq "$1" ] 2> /dev/null; then
    WPWAIT=$1
fi

# This is the name of the subdirectory to place the images
# that have been previously selected at random for wallpaper.
WPSAVE=.wpsave

# Prior to running this script, set the WPHOME environment
# variable to set a non-default wallpaper folder.
if [[ -z "$WPHOME" ]]; then
    if [[ -d "$DEFAULT_WPHOME" ]];  then WPHOME=$DEFAULT_WPHOME
    elif [[ -d "$HOME/Pictures" ]]; then WPHOME=$HOME/Pictures
    else                                 WPHOME=$HOME
    fi
fi

# This file contains the wallpaper currently being displayed.
# NOTE: The "." (dot) prefix is required to prevent it being
#       selected as a source for the next wallpaper image.
WPFILE="$WPHOME"/.background.png

WPDEST="$WPHOME"/"$WPSAVE"
if [[ ! -d "$WPDEST" ]]; then
    mkdir "$WPDEST"
    if [[ $? != 0 ]]; then
        echo "Unable to create $WPDEST. Exiting..."
        exit
    fi
fi

# Pass in a parameter of 0 (initial wait time) to get debug messages.
function debugmsg {
    if [[ WPWAIT -eq 0 ]]; then
        echo "$*"
    fi
}

function getdate {
    printf -v WPDATE '%-5d %s %s' $$ $(date +"%D %I:%M%p")
}
getdate

WPHIST="$WPDEST"/wallup.log
WPLOCK="$WPDEST"/.mult-lock
WPLPID="$WPLOCK"/lock-$$
WPFIFO="$WPLOCK"/wpipe

# Files used to store the screen and display configuration.
WPXRANDR="$WPHOME"/.screen
WPMONXML="$WPHOME"/.scrxml
WPMONCFG="$HOME"/.config/monitors.xml

echo "$WPDATE  Starting wallpaper updater for user $USER." >> "$WPHIST"

# If an old lock file exists, clear it out now.
if [[ -d "$WPLOCK" ]]; then
    for oldfile in "$WPLOCK"/*; do
        if [[ -f "$oldfile" ]]; then
            echo "$WPDATE  Removing old lock \"$oldfile\"." >> "$WPHIST"
            rm "$oldfile"
        fi
    done
else
    mkdir "$WPLOCK"
fi

# Create a new lock file for this process ID
touch "$WPLPID"

# Sleep without using "sleep", which forks a new process.
function minisleep {
    if [[ ! -p "$WPFIFO" ]]; then
        rm -f "$WPFIFO"
        mkfifo $WPFIFO
        if [[ $? -ne 0 ]]; then
            sleep $1
            return
        fi
    fi
    read -t $1 <>"$WPFIFO"
}

# Randomly select the next wallpaper image to be displayed.
function getrandom {
    cd "$WPHOME"
    WPNEXT=$(ls ${WPEXTS[@]/#/"*."} 2> /dev/null | shuf -n 1)
}

# Restore all of the previously displayed images back to the home folder.
function restore {
    cd "$WPDEST"

    # Count the total number of images being moved (for diagnostic purposes).
    WPFCNT=$(ls -1 ${WPEXTS[@]/#/"*."} 2> /dev/null | wc -l)
    echo "$WPDATE  Moving $WPFCNT image files from $WPSAVE back up to $WPHOME." >> "$WPHIST"
    mv ${WPEXTS[@]/#/"*."} "$WPHOME" 2> /dev/null
}

# Get the next wallpaper image to be dislayed.
function getnext {
    getrandom
    if [[ "$WPNEXT" == "" ]]; then
        restore
        getrandom

        # Quit now if there are no images in the wallpaper folder.
        if [[ "$WPNEXT" == "" ]]; then
            echo "$WPDATE  No Wallpaper images found in $WPHOME. Exiting..." >> "$WPHIST"
            rm -f "$WPLPID"
            exit
        fi
    fi
}

# Extract the display dimensions from the output of "xrandr --query".
function setdims {
    # Query and save the display configuration.
    xrandr --query > "$WPXRANDR"
    cp "$WPMONCFG" "$WPMONXML"

    #
    # Get the total screen dimensions.
    #
    WPSCREEN=($(awk '/Screen/ && sub(/.*current /, "") \
                          && sub(/x /,"") && sub(/,.*/,"")' "$WPXRANDR"))
    debugmsg "Screen is ${WPSCREEN[0]} pixels wide and ${WPSCREEN[1]} pixels tall."

    #
    # Count the number of connected monitors.
    #
    WPMONCNT=$(awk 'sub(/.* connected/,"") && sub(/x/," ") && sub(/\+/," ") && sub(/\+/," ")' "$WPXRANDR" | wc -l)

    #
    # Get the display size and offset for the first monitor.
    #
    WPDIMS1=($(awk -v dsp=1 'sub(/.* connected/,"") && sub(/x/," ") && sub(/\+/," ") && sub(/\+/," "){cnt++} \
                         (cnt==dsp){if ($1 == "primary") print $2 " " $3 " " $4 " " $5; \
                         else print $1 " " $2 " " $3 " " $4; exit}' "$WPXRANDR"))
    echo "$WPDATE  Monitor1 is ${WPDIMS1[0]} x ${WPDIMS1[1]} + ${WPDIMS1[2]} + ${WPDIMS1[3]}" >> "$WPHIST"

    # Verify we can do the proper image conversions for dual displays.
    hash convert >& /dev/null
    if [[ $? -ne 0 ]]; then
        WPDUAL=false
        debugmsg "The convert function has not been installed."
        if [[ $WPMONCNT -ne 1 ]]; then
            WPDIMS1[0]=${WPSCREEN[0]}
            WPDIMS1[1]=${WPSCREEN[1]}
            echo "$WPDATE  Install \"imagemagick\" for dual displays." >> "$WPHIST"
            echo "$WPDATE  ->  (sudo apt install imagemagick)" >> "$WPHIST"
        fi
    elif [[ $WPMONCNT -eq 1 ]]; then
        WPDUAL=false
        debugmsg "There is only one monitor connected to this system."
    elif [[ $WPMONCNT -eq 2 ]]; then
        WPDUAL=true
        debugmsg "There are two monitors connected to this system."
    else
        WPDUAL=false
        debugmsg "There are $WPMONCNT monitors. Currently, only 1 or 2 monitors"
        debugmsg "are supported, treating as a single monitor."
        WPDIMS1[0]=${WPSCREEN[0]}
        WPDIMS1[1]=${WPSCREEN[1]}
    fi

    if $WPDUAL; then
        #
        # Get the display size and offset for the second monitor.
        #
        WPDIMS2=($(awk -v dsp=2 'sub(/.* connected/,"") && sub(/x/," ") && sub(/\+/," ") && sub(/\+/," "){cnt++} \
                             (cnt==dsp){if ($1 == "primary") print $2 " " $3 " " $4 " " $5; \
                             else print $1 " " $2 " " $3 " " $4; exit}' "$WPXRANDR"))
        echo "$WPDATE  Monitor2 is ${WPDIMS2[0]} x ${WPDIMS2[1]} + ${WPDIMS2[2]} + ${WPDIMS2[3]}" >> "$WPHIST"

        # Reverse the display ordering if necessary (must be left->right or top->bottom).
        if [[ ${WPDIMS2[1]} -eq ${WPDIMS1[3]} || ${WPDIMS2[0]} -eq ${WPDIMS1[2]} ]]; then
            # Displays are reversed relative to the screen. Swap the specs.
            WPDIMSX=(${WPDIMS1[@]})
            WPDIMS1=(${WPDIMS2[@]})
            WPDIMS2=(${WPDIMSX[@]})
            debugmsg "Reversed: ${WPDIMS1[@]} - ${WPDIMS2[@]}"
        fi

        # Check if the displays are stacked vertically or not.
        if [[ ${WPDIMS1[1]} -eq ${WPDIMS2[3]} ]]; then
            # Vertically stacked, display 1 is above display 2.
            WPSTACKED=true
            # Calculate the blank areas left/right of the monitors.
            WPXXOFS=$((${WPDIMS1[0]} + ${WPDIMS1[2]}))
            WPXOVER=$((${WPSCREEN[0]} - $WPXXOFS))
            WPB1=(${WPDIMS1[2]} ${WPDIMS1[1]})
            WPB2=($WPXOVER ${WPDIMS1[1]})
            WPXXOFS=$((${WPDIMS2[0]} + ${WPDIMS2[2]}))
            WPXOVER=$((${WPSCREEN[0]} - $WPXXOFS))
            WPB3=(${WPDIMS2[2]} ${WPDIMS2[1]})
            WPB4=($WPXOVER ${WPDIMS2[1]})
        elif [[ ${WPDIMS1[0]} -eq ${WPDIMS2[2]} ]]; then
            # Side-by-side, display 1 is to the left of display 2.
            WPSTACKED=false
            # Calculate the blank areas above/below the monitors.
            WPYYOFS=$((${WPDIMS1[1]} + ${WPDIMS1[3]}))
            WPYOVER=$((${WPSCREEN[1]} - $WPYYOFS))
            WPB1=(${WPDIMS1[0]} ${WPDIMS1[3]})
            WPB2=(${WPDIMS1[0]} $WPYOVER)
            WPYYOFS=$((${WPDIMS2[1]} + ${WPDIMS2[3]}))
            WPYOVER=$((${WPSCREEN[1]} - $WPYYOFS))
            WPB3=(${WPDIMS2[0]} ${WPDIMS2[3]})
            WPB4=(${WPDIMS2[0]} $WPYOVER)
        else
            # Appears to be mirrored displays - treat as single.
            WPDUAL=false
            echo "$WPDATE  Monitor2 is mirroring Monitor1" >> "$WPHIST"
        fi
        debugmsg "Stacked: $WPSTACKED - ${WPB1[@]} ${WPB2[@]} ${WPB3[@]} ${WPB4[@]}"
    fi
}

function checkdims {
    cmp "$WPMONCFG" "$WPMONXML" > /dev/null
    if [[ $? -ne 0 ]]; then
        setdims
        WPWAIT=0
    fi
}

# Seed the first wallpaper image if necessary.
if [[ ! -f "$WPFILE" ]]; then
    getrandom
    cp "$WPNEXT" "$WPFILE"
fi
 
# Make sure we are using the "spanned" background option.
gsettings set org.gnome.desktop.background picture-options 'spanned'
gsettings set org.gnome.desktop.background picture-uri file://"$WPFILE"

# Find the dimensions of the desktop background.
setdims

while true; do

    while [[ $WPWAIT -gt 0 ]]; do
        if [[ ! -f "$WPLPID" ]]; then
            getdate
            echo "$WPDATE  Missing \"$WPLPID\". Exiting..." >> "$WPHIST"
            exit
        fi

        minisleep $WPRESP
        WPWAIT=$((WPWAIT - WPRESP))

        if [[ $(ps -C gnome-shell -o euser= | grep $USER) == "" ]]; then
            getdate
            echo "$WPDATE  User $USER not logged in. Exiting..." >> "$WPHIST"
            rm -f "$WPLPID"
            exit
        fi

        if $WPDYNAM; then
            checkdims
        fi

    done
    WPWAIT=$WPTIME

    # If the destination directory disappeared while we were waiting, exit now.
    if [[ ! -d "$WPDEST" ]]; then
        echo "No directory $WPDEST. Exiting..."
        exit
    fi

    getdate

    getnext

    if $WPDUAL; then
        WPNEXT1=$WPNEXT
        mv "$WPHOME"/"$WPNEXT1" "$WPHOME"/"$WPNEXT1".HOLD
        getnext
        WPNEXT2=$WPNEXT
        mv "$WPHOME"/"$WPNEXT1".HOLD "$WPDEST"/"$WPNEXT1"
        mv "$WPHOME"/"$WPNEXT2" "$WPDEST"

        # Resize and crop each image to fit its monitor.
        cd "$WPDEST"
        CVTFLAGS="-resize ${WPDIMS1[0]}x${WPDIMS1[1]}^ -gravity center -crop ${WPDIMS1[0]}x${WPDIMS1[1]}+0+0"
        convert "$WPNEXT1" $CVTFLAGS .wall1.png
        CVTFLAGS="-resize ${WPDIMS2[0]}x${WPDIMS2[1]}^ -gravity center -crop ${WPDIMS2[0]}x${WPDIMS2[1]}+0+0"
        convert "$WPNEXT2" $CVTFLAGS .wall2.png

        if $WPSTACKED; then
            # Blank regions are left/right, images are above/below.
            WPAPPBLN=+append
            WPAPPEND=-append
        else
            # Blank regions are above/below, images are left/right.
            WPAPPBLN=-append
            WPAPPEND=+append
        fi

        # Append any non-zero blank regions to the wallpaper image.

        if [[ ${WPB1[0]} -ne 0 && ${WPB1[1]} -ne 0 ]]; then
            convert -size ${WPB1[0]}x${WPB1[1]} xc:black .wblank1.png
            convert .wblank1.png .wall1.png $WPAPPBLN .wall1.png
        fi
        if [[ ${WPB2[0]} -ne 0 && ${WPB2[1]} -ne 0 ]]; then
            convert -size ${WPB2[0]}x${WPB2[1]} xc:black .wblank2.png
            convert .wall1.png .wblank2.png $WPAPPBLN .wall1.png
        fi

        if [[ ${WPB3[0]} -ne 0 && ${WPB3[1]} -ne 0 ]]; then
            convert -size ${WPB3[0]}x${WPB3[1]} xc:black .wblank3.png
            convert .wblank3.png .wall2.png $WPAPPBLN .wall2.png
        fi
        if [[ ${WPB4[0]} -ne 0 && ${WPB4[1]} -ne 0 ]]; then
            convert -size ${WPB4[0]}x${WPB4[1]} xc:black .wblank4.png
            convert .wall2.png .wblank4.png $WPAPPBLN .wall2.png
        fi

        convert .wall1.png .wall2.png $WPAPPEND .wallpaper.png

        # Here is where the wallpaper appears on the screen.
        cp .wallpaper.png "$WPFILE"

        echo "$WPDATE  New wallpaper image derived from $WPNEXT1 and $WPNEXT2" >> "$WPHIST"
    else
        mv "$WPHOME"/"$WPNEXT" "$WPDEST"

        cd "$WPDEST"

        hash convert >& /dev/null
        if [[ $? -ne 0 ]]; then
            # We cannot resize or crop the image, use it as-is.
            cp "$WPNEXT" .wallpaper.png
        else
            # Resize and crop to fit the monitor.
            CVTFLAGS="-resize ${WPDIMS1[0]}x${WPDIMS1[1]}^ -gravity center -crop ${WPDIMS1[0]}x${WPDIMS1[1]}+0+0"
            convert "$WPNEXT" $CVTFLAGS .wallpaper.png
        fi

        # Here is where the wallpaper appears on the screen.
        cp .wallpaper.png "$WPFILE"

        echo "$WPDATE  New wallpaper image derived from $WPNEXT" >> "$WPHIST"
    fi

done
